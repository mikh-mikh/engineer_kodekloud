Jenkins chained builds

The DevOps team was looking for a solution where they want to restart Apache service on all app servers if the deployment goes fine on these servers in Stratos Datacenter. After having a discussion, they came up with a solution to use Jenkins chained builds so that they can use a downstream job for services which should only be triggered by the deployment job. So as per the requirements mentioned below configure the required Jenkins jobs.
Click on the Jenkins button on the top bar to access the Jenkins UI. Login using username admin and Adm!n321 password.
Similarly you can access Gitea UI on port 8090 and username and password for Git is sarah and Sarah_pass123 respectively. Under user sarah you will find a repository named web.
Apache is already installed and configured on all app server so no changes are needed there. The doc root /var/www/html on all these app servers is shared among the Storage server under /var/www/html directory.
1. Create a Jenkins job named nautilus-app-deployment and configure it to pull change from the master branch of web repository on Storage server under /var/www/html directory, which is already a local git repository tracking the origin web repository. Since /var/www/html on Storage server is a shared volume so changes should auto reflect on all apps.
2. Create another Jenkins job named manage-services and make it a downstream job for nautilus-app-deployment job. Things to take care about this job are:

a. This job should restart httpd service on all app servers.
b. Trigger this job only if the upstream job i.e nautilus-app-deployment is stable.

LB server is already configured. Click on the App button on the top bar to access the app. You should be able to see the latest changes you made. Please make sure the required content is loading on the main URL https://<LBR-URL> i.e there should not be a sub-directory like https://<LBR-URL>/web etc.


1. Install plugins:
Gitea, Build Authorization Token Root, SSH  & publish over SSH. Do not forget to restart jenkins after installing plugins (checkbox "Restart Jenkins when installation is complete and no jobs are running").

2. Create credentails for app servers users (from nautilus project wiki) and gitea (from task).

3. Create SSH remote hosts/ssh (all app servers).

4. Create Publish over SSH: name\hostname - ststrot01, username from wiki (natasha - sarah hasn't account and permissions to /var/www/html), Remote Directory (/var/www/html), password from wiki (Bl@kW)

6. Create a Jenkins Build Job as per the task with name "nautilus-app-deployment"
sorce code managment "Git": Repository URL (dynamic - you need to login to gitea with sarah username and provided password to get it) "https://80-port-a06fdfdaf16443c2.labs.kodekloud.com/sarah/web.git" (example), gitea credentails (sarah), branch "*/master"
build triggers: 
trigger builds remotely (e.g., from scripts), 
authentication token: KODEKLOUDENGINEER
Build Environment:
transfer set source files **/*

7. login to gitea and add webhook (repo - settings - Webhooks):
https://8080-port-a06fdfdaf16443c2.labs.kodekloud.com/buildByToken/build?job=nautilus-app-deployment&token=KODEKLOUDENGINEER
get this link from jenkins job - build trigger), with method POST, after creating check it (Test Delivery)

8. Create a Jenkins Build Job as per the task with name "manage-services"
Build Triggers: "Build after other projects are builds", "project to match": nautilus-app-deployment, "trigger if build is astable"
Build steps: "remote shell script on the remote host"
for stapp01:
echo Ir0nM@n | sudo -S systemctl restart httpd && systemctl status httpd --no-pager
for stapp02:
echo Am3ric@ | sudo -S systemctl restart httpd && systemctl status httpd --no-pager
for stapp03:
echo BigGr33n | sudo -S systemctl restart httpd && systemctl status httpd --no-pager

9. go to gitea webhooks page and press "test delivery", then go to jenkins and check chain build (output of manage-services)
do not go and do not anything to ststor01 manually (KK platform check makes "git add . && git commit -a && git push origin master" in a ststor01 serv - you may break it)
