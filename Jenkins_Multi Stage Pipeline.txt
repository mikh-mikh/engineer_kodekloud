Jenkins Multi Stage Pipeline

The development team of xFusionCorp Industries is working on to develop a new static website and they are planning to deploy the same on Nautilus App Servers using Jenkins pipeline. They have shared their requirements with the DevOps team and accordingly we need to create a Jenkins pipeline job. Please find below more details about the task:
Click on the Jenkins button on the top bar to access the Jenkins UI. Login using username admin and password Adm!n321.
Similarly, click on the Gitea button on the top bar to access the Gitea UI. Login using username sarah and password Sarah_pass123.
There is a repository named sarah/web in Gitea that is already cloned on Storage server under /var/www/html directory.
Update the content of the file index.html under the same repository to Welcome to xFusionCorp Industries and push the changes to the origin into the master branch.
Apache is already installed on all app Servers its running on port 8080.
Create a Jenkins pipeline job named deploy-job (it must not be a Multibranch pipeline job) and pipeline should have two stages Deploy and Test ( names are case sensitive ). Configure these stages as per details mentioned below.
a. The Deploy stage should deploy the code from web repository under /var/www/html on the Storage Server, as this location is already mounted to the document root /var/www/html of all app servers.
b. The Test stage should just test if the app is working fine and website is accessible. Its up to you how you design this stage to test it out, you can simply add a curl command as well to run a curl against the LBR URL (http://stlb01:8091) to see if the website is working or not. Make sure this stage fails in case the website/app is not working or if the Deploy stage fails.
Click on the App button on the top bar to see the latest changes you deployed. Please make sure the required content is loading on the main URL http://stlb01:8091 i.e there should not be a sub-directory like http://stlb01:8091/web etc.
Note:
You might need to install some plugins and restart Jenkins service. So, we recommend clicking on Restart Jenkins when installation is complete and no jobs are running on plugin installation/update page i.e update centre. Also, Jenkins UI sometimes gets stuck when Jenkins service restarts in the back end. In this case, please make sure to refresh the UI page.
For these kind of scenarios requiring changes to be done in a web UI, please take screenshots so that you can share it with us for review in case your task is marked incomplete. You may also consider using a screen recording software such as loom.com to record and share your work.


1. install plugins to jenkins: Pipeline Git, SSH 

2. set jenkins agent on ststor01

3. ssh to ststor01 and do:
cd /var/www/html
vi index.html ()
git add .
git commit -m "update"
git push origin master

4. add pipeline script:

def remote = [:]
remote.name = 'ststor01'
remote.host = 'ststor01'
remote.user = 'natasha'
remote.password = 'Bl@kW'
remote.allowAnyHosts = true             
pipeline {
    // Run on agent with label 'ststor01'
    agent { label 'ststor01' }
    // Pipeline stages 
    stages {
        // Deploy stage
        stage('Deploy') {
            steps {
                echo 'Deploying ...'
                // Connect to GIT and download the repo code
                // Use the Jenkins Credentials by ID: GIT_CREDS
                git credentialsId: 'GIT_CREDS', url: 'https://80-port-cd9fa4e708904b28.labs.kodekloud.com/sarah/web.git'
                // Transfer all the files we downloaded to /tmp of ststor01
                sshPut remote: remote, from: '.', into: '/tmp'
                // Finally move all the files from /tmp to /data on ststor01
                sshCommand remote: remote, command: "mv -f /tmp/${JOB_NAME}/* /var/www/html"
            }
        }
        // Test stage
        stage('Test') {
            environment {
                // Update the below value as per the text given in question
                INDEX_CONTENT = 'Welcome to xFusionCorp Industries'
            }
            steps {
                // Now test that the content from default page from HTTPD on each 
                // appservers is same as the index.html content required as
                sh '((curl http://stapp01:8080/ | grep -F "$INDEX_CONTENT") && true)'
                sh '((curl http://stlb01:8091/ | grep -F "$INDEX_CONTENT") && true)'
            }
        }
    }
}